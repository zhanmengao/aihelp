// Code generated by dbtool, DO NOT EDIT.

package gendb

import (
	"context"

	genredis "{{.GenPkgPath}}/gendb/internal/genredis"
	gengocache "{{.GenPkgPath}}/gendb/internal/gengocache"
	{{if .MParams}}params "{{.GenPkgPath}}/gendb/params"{{end}}
	pb "{{.PbPkgPath}}/pb"
	basedb"github.com/zhanmengao/aihelp/database"
)

{{range .DBs}}
type I{{.Key}}DB interface {
	{{range .Slice -}}
	// Get{{.StructName}} loads {{.StructName}} from `{{.DBName}}`
	//   data *pb.{{.StructName}} if every thing goes well.
	//   ok   bool is false if there is no data.
	//   err  error is not nil if there is something wrong except no data.
	//
	// prometheus metric: QPS, KeySize and OperationProcessTime
	//
	// generated from "{{.SrcComment}}"
	Get{{.StructName}}(ctx context.Context, {{range .Params}}{{.ParamName}} {{.ParamType}},{{end}} opts ...*basedb.Options[*pb.{{.StructName}}]) (data *pb.{{.StructName}}, ok bool, err error)
	// Get{{.StructName}}WithCache try get data from cache provider
	// first, if no data in cache, it will fall back to Get{{.StructName}}
	//   c cache.ICache cache provider
	//
	Get{{.StructName}}WithSession(ctx context.Context, {{range .Params}}{{.ParamName}} {{.ParamType}},{{end}} opts ...*basedb.Options[*pb.{{.StructName}}]) (data *pb.{{.StructName}}, ok bool, err error)
	// Set{{.StructName}} saves {{.StructName}} to `{{.DBName}}`
	//   err error any error when put data to database
	//
	// prometheus metric: QPS, KeySize and OperationProcessTime
	//
	// generated from "{{.SrcComment}}"
	Set{{.StructName}}(ctx context.Context, data *pb.{{.StructName}})(err error)
	// Set{{.StructName}}WithCache try Set{{.StructName}} first. If success, put it to cache
	//   c cache.ICache cache provider
	// 
	// generated from "{{.SrcComment}}"
	Set{{.StructName}}WithSess(ctx context.Context, data *pb.{{.StructName}}) (err error)
	// GetKey{{.StructName}} returns key of {{.StructName}}
	//
	// generated from "{{.SrcComment}}"
	GetKey{{.StructName}}({{range .KeyParams}}{{.ParamName}} {{.ParamType}},{{end}}) string
	{{if eq .Type "hash" -}}
	// GetField{{.StructName}} returns field of {{.StructName}}
	//
	// generated from "{{.SrcComment}}"
	GetField{{.StructName}}({{range .FieldParams}}{{.ParamName}} {{.ParamType}}, {{end}}) string
	{{end -}}

	{{ if eq .Type "string" -}}
	// SetEX{{.StructName}} saves {{.StructName}} to `{{.DBName}}` with TTL
	//   data *pb.{{.StructName}}
	//   ttl  int data live seconds
	//   err  error any error when put data to database
	//
	// prometheus metric: QPS, KeySize and OperationProcessTime
	// 
	// generated from "{{.SrcComment}}"
	SetEX{{.StructName}}(ctx context.Context, data *pb.{{.StructName}}, ttl int)(err error)

	{{end -}}
	// Delete{{.StructName}} delete {{.StructName}} from `{{.DBName}}`
	//   err  error any error when put data to database
	//
	// prometheus metric: QPS and OperationProcessTime
	// 
	// generated from "{{.SrcComment}}"
	Delete{{.StructName}}(ctx context.Context, {{range .Params}}{{.ParamName}} {{.ParamType}},{{end}})(ok bool, err error)
	{{if .MultiMark -}}
	// MGet{{.StructName}} 
	//   data *pb.{{.StructName}}
	//   err  error any error when put data to database
	//
	// prometheus metric: QPS, KeySize and OperationProcessTime
	// 
	// generated from "{{.SrcComment}}"{{ $paramCount := len .Params }}
	{{if eq $paramCount 1}}{{ $param := index .Params 0 -}}
	MGet{{.StructName}}(ctx context.Context, {{$param.ParamName}} []{{$param.ParamType}})(data map[{{$param.ParamType}}]*pb.{{.StructName}}, err error)
	{{else if .MParams -}}
	MGet{{.StructName}}(ctx context.Context, parameters []params.{{.StructName}})(data map[params.{{.StructName}}]*pb.{{.StructName}}, err error)
	{{end -}}
	// MSet{{.StructName}}
	//   err error any error when put data to database
	//
	// prometheus metric: QPS, KeySize and OperationProcessTime
	// 
	// generated from "{{.SrcComment}}"
	MSet{{.StructName}}(ctx context.Context, data []*pb.{{.StructName}})(err error)
	{{end -}}
	{{end -}}
}
{{end}}

{{range .DBs -}}
// assert *genredis.{{.Key}}{} has implemented I{{.Key}}DB
var _ I{{.Key}}DB = (*genredis.{{.Key}})(nil)
{{end}}

{{range .DBs}}
// New{{.Key}}DBRedis gets a new I{{.Key}}DB instance
func New{{.Key}}DBRedis() I{{.Key}}DB {
	return &genredis.{{.Key}}{}
}
// New{{.Key}}DBCache gets a new I{{.Key}}DB instance
func New{{.Key}}DBCache() I{{.Key}}DB {
	return &gengocache.{{.Key}}{}
}
{{end}}
