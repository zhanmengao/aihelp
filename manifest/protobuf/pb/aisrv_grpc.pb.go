// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.2
// source: aisrv.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AisrvGlobalClient is the client API for AisrvGlobal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AisrvGlobalClient interface {
	//获取沟通记录（概要）
	GetHistory(ctx context.Context, in *GetHistoryListReq, opts ...grpc.CallOption) (*GetHistoryListRsp, error)
	//获取详细信息
	GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoRsp, error)
	//继续讨论
	ContinueSend(ctx context.Context, in *ContinueSendReq, opts ...grpc.CallOption) (*ContinueSendRsp, error)
}

type aisrvGlobalClient struct {
	cc grpc.ClientConnInterface
}

func NewAisrvGlobalClient(cc grpc.ClientConnInterface) AisrvGlobalClient {
	return &aisrvGlobalClient{cc}
}

func (c *aisrvGlobalClient) GetHistory(ctx context.Context, in *GetHistoryListReq, opts ...grpc.CallOption) (*GetHistoryListRsp, error) {
	out := new(GetHistoryListRsp)
	err := c.cc.Invoke(ctx, "/zhanmengao.aihelp.proto.aisrv_global/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aisrvGlobalClient) GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoRsp, error) {
	out := new(GetChatInfoRsp)
	err := c.cc.Invoke(ctx, "/zhanmengao.aihelp.proto.aisrv_global/GetChatInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aisrvGlobalClient) ContinueSend(ctx context.Context, in *ContinueSendReq, opts ...grpc.CallOption) (*ContinueSendRsp, error) {
	out := new(ContinueSendRsp)
	err := c.cc.Invoke(ctx, "/zhanmengao.aihelp.proto.aisrv_global/ContinueSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AisrvGlobalServer is the server API for AisrvGlobal service.
// All implementations should embed UnimplementedAisrvGlobalServer
// for forward compatibility
type AisrvGlobalServer interface {
	//获取沟通记录（概要）
	GetHistory(context.Context, *GetHistoryListReq) (*GetHistoryListRsp, error)
	//获取详细信息
	GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoRsp, error)
	//继续讨论
	ContinueSend(context.Context, *ContinueSendReq) (*ContinueSendRsp, error)
}

// UnimplementedAisrvGlobalServer should be embedded to have forward compatible implementations.
type UnimplementedAisrvGlobalServer struct {
}

func (UnimplementedAisrvGlobalServer) GetHistory(context.Context, *GetHistoryListReq) (*GetHistoryListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedAisrvGlobalServer) GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatInfo not implemented")
}
func (UnimplementedAisrvGlobalServer) ContinueSend(context.Context, *ContinueSendReq) (*ContinueSendRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContinueSend not implemented")
}

// UnsafeAisrvGlobalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AisrvGlobalServer will
// result in compilation errors.
type UnsafeAisrvGlobalServer interface {
	mustEmbedUnimplementedAisrvGlobalServer()
}

func RegisterAisrvGlobalServer(s grpc.ServiceRegistrar, srv AisrvGlobalServer) {
	s.RegisterService(&AisrvGlobal_ServiceDesc, srv)
}

func _AisrvGlobal_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AisrvGlobalServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhanmengao.aihelp.proto.aisrv_global/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AisrvGlobalServer).GetHistory(ctx, req.(*GetHistoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AisrvGlobal_GetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AisrvGlobalServer).GetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhanmengao.aihelp.proto.aisrv_global/GetChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AisrvGlobalServer).GetChatInfo(ctx, req.(*GetChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AisrvGlobal_ContinueSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AisrvGlobalServer).ContinueSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhanmengao.aihelp.proto.aisrv_global/ContinueSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AisrvGlobalServer).ContinueSend(ctx, req.(*ContinueSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AisrvGlobal_ServiceDesc is the grpc.ServiceDesc for AisrvGlobal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AisrvGlobal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zhanmengao.aihelp.proto.aisrv_global",
	HandlerType: (*AisrvGlobalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistory",
			Handler:    _AisrvGlobal_GetHistory_Handler,
		},
		{
			MethodName: "GetChatInfo",
			Handler:    _AisrvGlobal_GetChatInfo_Handler,
		},
		{
			MethodName: "ContinueSend",
			Handler:    _AisrvGlobal_ContinueSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aisrv.proto",
}

// AisrvBookClient is the client API for AisrvBook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AisrvBookClient interface {
	//写书评
	ReadBook(ctx context.Context, in *ReadBookReq, opts ...grpc.CallOption) (*ReadBookRsp, error)
}

type aisrvBookClient struct {
	cc grpc.ClientConnInterface
}

func NewAisrvBookClient(cc grpc.ClientConnInterface) AisrvBookClient {
	return &aisrvBookClient{cc}
}

func (c *aisrvBookClient) ReadBook(ctx context.Context, in *ReadBookReq, opts ...grpc.CallOption) (*ReadBookRsp, error) {
	out := new(ReadBookRsp)
	err := c.cc.Invoke(ctx, "/zhanmengao.aihelp.proto.aisrv_book/ReadBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AisrvBookServer is the server API for AisrvBook service.
// All implementations should embed UnimplementedAisrvBookServer
// for forward compatibility
type AisrvBookServer interface {
	//写书评
	ReadBook(context.Context, *ReadBookReq) (*ReadBookRsp, error)
}

// UnimplementedAisrvBookServer should be embedded to have forward compatible implementations.
type UnimplementedAisrvBookServer struct {
}

func (UnimplementedAisrvBookServer) ReadBook(context.Context, *ReadBookReq) (*ReadBookRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBook not implemented")
}

// UnsafeAisrvBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AisrvBookServer will
// result in compilation errors.
type UnsafeAisrvBookServer interface {
	mustEmbedUnimplementedAisrvBookServer()
}

func RegisterAisrvBookServer(s grpc.ServiceRegistrar, srv AisrvBookServer) {
	s.RegisterService(&AisrvBook_ServiceDesc, srv)
}

func _AisrvBook_ReadBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AisrvBookServer).ReadBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhanmengao.aihelp.proto.aisrv_book/ReadBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AisrvBookServer).ReadBook(ctx, req.(*ReadBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AisrvBook_ServiceDesc is the grpc.ServiceDesc for AisrvBook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AisrvBook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zhanmengao.aihelp.proto.aisrv_book",
	HandlerType: (*AisrvBookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadBook",
			Handler:    _AisrvBook_ReadBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aisrv.proto",
}

// AisrvCosClient is the client API for AisrvCos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AisrvCosClient interface {
	CosPlay(ctx context.Context, in *CosPlayReq, opts ...grpc.CallOption) (*CosPlayRsp, error)
}

type aisrvCosClient struct {
	cc grpc.ClientConnInterface
}

func NewAisrvCosClient(cc grpc.ClientConnInterface) AisrvCosClient {
	return &aisrvCosClient{cc}
}

func (c *aisrvCosClient) CosPlay(ctx context.Context, in *CosPlayReq, opts ...grpc.CallOption) (*CosPlayRsp, error) {
	out := new(CosPlayRsp)
	err := c.cc.Invoke(ctx, "/zhanmengao.aihelp.proto.aisrv_cos/CosPlay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AisrvCosServer is the server API for AisrvCos service.
// All implementations should embed UnimplementedAisrvCosServer
// for forward compatibility
type AisrvCosServer interface {
	CosPlay(context.Context, *CosPlayReq) (*CosPlayRsp, error)
}

// UnimplementedAisrvCosServer should be embedded to have forward compatible implementations.
type UnimplementedAisrvCosServer struct {
}

func (UnimplementedAisrvCosServer) CosPlay(context.Context, *CosPlayReq) (*CosPlayRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CosPlay not implemented")
}

// UnsafeAisrvCosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AisrvCosServer will
// result in compilation errors.
type UnsafeAisrvCosServer interface {
	mustEmbedUnimplementedAisrvCosServer()
}

func RegisterAisrvCosServer(s grpc.ServiceRegistrar, srv AisrvCosServer) {
	s.RegisterService(&AisrvCos_ServiceDesc, srv)
}

func _AisrvCos_CosPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosPlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AisrvCosServer).CosPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zhanmengao.aihelp.proto.aisrv_cos/CosPlay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AisrvCosServer).CosPlay(ctx, req.(*CosPlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AisrvCos_ServiceDesc is the grpc.ServiceDesc for AisrvCos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AisrvCos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zhanmengao.aihelp.proto.aisrv_cos",
	HandlerType: (*AisrvCosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CosPlay",
			Handler:    _AisrvCos_CosPlay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aisrv.proto",
}

// AisrvCodingClient is the client API for AisrvCoding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AisrvCodingClient interface {
}

type aisrvCodingClient struct {
	cc grpc.ClientConnInterface
}

func NewAisrvCodingClient(cc grpc.ClientConnInterface) AisrvCodingClient {
	return &aisrvCodingClient{cc}
}

// AisrvCodingServer is the server API for AisrvCoding service.
// All implementations should embed UnimplementedAisrvCodingServer
// for forward compatibility
type AisrvCodingServer interface {
}

// UnimplementedAisrvCodingServer should be embedded to have forward compatible implementations.
type UnimplementedAisrvCodingServer struct {
}

// UnsafeAisrvCodingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AisrvCodingServer will
// result in compilation errors.
type UnsafeAisrvCodingServer interface {
	mustEmbedUnimplementedAisrvCodingServer()
}

func RegisterAisrvCodingServer(s grpc.ServiceRegistrar, srv AisrvCodingServer) {
	s.RegisterService(&AisrvCoding_ServiceDesc, srv)
}

// AisrvCoding_ServiceDesc is the grpc.ServiceDesc for AisrvCoding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AisrvCoding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zhanmengao.aihelp.proto.aisrv_coding",
	HandlerType: (*AisrvCodingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "aisrv.proto",
}

// ApsrvWriterClient is the client API for ApsrvWriter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApsrvWriterClient interface {
}

type apsrvWriterClient struct {
	cc grpc.ClientConnInterface
}

func NewApsrvWriterClient(cc grpc.ClientConnInterface) ApsrvWriterClient {
	return &apsrvWriterClient{cc}
}

// ApsrvWriterServer is the server API for ApsrvWriter service.
// All implementations should embed UnimplementedApsrvWriterServer
// for forward compatibility
type ApsrvWriterServer interface {
}

// UnimplementedApsrvWriterServer should be embedded to have forward compatible implementations.
type UnimplementedApsrvWriterServer struct {
}

// UnsafeApsrvWriterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApsrvWriterServer will
// result in compilation errors.
type UnsafeApsrvWriterServer interface {
	mustEmbedUnimplementedApsrvWriterServer()
}

func RegisterApsrvWriterServer(s grpc.ServiceRegistrar, srv ApsrvWriterServer) {
	s.RegisterService(&ApsrvWriter_ServiceDesc, srv)
}

// ApsrvWriter_ServiceDesc is the grpc.ServiceDesc for ApsrvWriter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApsrvWriter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zhanmengao.aihelp.proto.apsrv_writer",
	HandlerType: (*ApsrvWriterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "aisrv.proto",
}
