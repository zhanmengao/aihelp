// +//
// Code generated by dbtool, DO NOT EDIT.
package genredis

import (
	"context"
	"fmt"
	basedb "github.com/zhanmengao/aihelp/database"
	dbnames "github.com/zhanmengao/aihelp/manifest/protobuf/gendb/dbnames"
	pb "github.com/zhanmengao/aihelp/manifest/protobuf/pb"
)

func (p *Pika) getDBUserMessageDatabase() *basedb.THashStore[*pb.DBUserMessage] {
	return basedb.NewHashStore[*pb.DBUserMessage](dbnames.Pika, keyDBUserMessage, fieldDBUserMessage, "DBUserMessage")
}

// GetKeyDBUserMessage returns key of DBUserMessage
//
// generated from "// @db:hash|Pika|DBUser:%s,UID|DBUserMessage"
func (p *Pika) GetKeyDBUserMessage(UID string) string {
	return fmt.Sprintf(keyDBUserMessage, UID)
}

// GetFieldDBUserMessage returns field of DBUserMessage
//
// generated from "// @db:hash|Pika|DBUser:%s,UID|DBUserMessage"
func (p *Pika) GetFieldDBUserMessage() string {
	return fieldDBUserMessage
}

// GetDBUserMessage loads DBUserMessage from `Pika`
//
//	data *pb.DBUserMessage if every thing goes well.
//	ok   bool is false if there is no data.
//	err  error is not nil if there is something wrong except no data.
//
// prometheus metric: QPS, KeySize and OperationProcessTime
//
// generated from "// @db:hash|Pika|DBUser:%s,UID|DBUserMessage"
func (p *Pika) GetDBUserMessage(ctx context.Context, UID string, opts ...*basedb.Options[*pb.DBUserMessage]) (data *pb.DBUserMessage, ok bool, err error) {
	key := p.GetKeyDBUserMessage(UID)
	field := p.GetFieldDBUserMessage()
	data = &pb.DBUserMessage{}
	db := p.getDBUserMessageDatabase()
	ok, err = db.Get(ctx, key, field, &data, opts...)
	if !ok || err != nil {
		data.UID = UID
	}
	return
}

func (p *Pika) GetDBUserMessageWithSession(ctx context.Context, UID string, opts ...*basedb.Options[*pb.DBUserMessage]) (data *pb.DBUserMessage, ok bool, err error) {
	key := p.GetKeyDBUserMessage(UID)
	field := p.GetFieldDBUserMessage()
	data = &pb.DBUserMessage{}
	db := p.getDBUserMessageDatabase()
	ok, err = db.GetFromSession(ctx, key, field, &data, opts...)
	if !ok || err != nil {
		data.UID = UID
	}
	return
}

// SetDBUserMessage saves DBUserMessage to `Pika`
//
//	err error any error when put data to database
//
// prometheus metric: QPS, KeySize and OperationProcessTime
//
// generated from "// @db:hash|Pika|DBUser:%s,UID|DBUserMessage"
func (p *Pika) SetDBUserMessage(ctx context.Context, data *pb.DBUserMessage) (err error) {
	key := p.GetKeyDBUserMessage(data.UID)
	field := p.GetFieldDBUserMessage()
	db := p.getDBUserMessageDatabase()
	return db.Set(ctx, key, field, data)
}

func (p *Pika) SetDBUserMessageWithSess(ctx context.Context, data *pb.DBUserMessage) (err error) {
	key := p.GetKeyDBUserMessage(data.UID)
	field := p.GetFieldDBUserMessage()
	db := p.getDBUserMessageDatabase()
	return db.SetWithSess(ctx, key, field, data)
}

// DeleteDBUserMessage is generated from "// @db:hash|Pika|DBUser:%s,UID|DBUserMessage"
//
//	err  error any error when put data to database
//
// if monitor is enabled on init this operation records prometheus
// metric: QPS and OperationProcessTime
func (p *Pika) DeleteDBUserMessage(ctx context.Context, UID string) (ok bool, err error) {
	key := p.GetKeyDBUserMessage(UID)
	field := p.GetFieldDBUserMessage()
	db := p.getDBUserMessageDatabase()
	return db.Delete(ctx, key, field)
}
