// +//
// Code generated by dbtool, DO NOT EDIT.
package genredis

import (
	"context"
	"fmt"
	basedb "github.com/zhanmengao/aihelp/database"
	dbnames "github.com/zhanmengao/aihelp/manifest/protobuf/gendb/dbnames"
	pb "github.com/zhanmengao/aihelp/manifest/protobuf/pb"
)

func (p *Pika) getDBChatSessionDatabase() *basedb.THashStore[*pb.DBChatSession] {
	return basedb.NewHashStore[*pb.DBChatSession](dbnames.Pika, keyDBChatSession, fieldDBChatSession, "DBChatSession")
}

// GetKeyDBChatSession returns key of DBChatSession
//
// generated from "// @db:hash|Pika|DBUser:%s,UID|DBChatSession:%s,SessionKey"
func (p *Pika) GetKeyDBChatSession(UID string) string {
	return fmt.Sprintf(keyDBChatSession, UID)
}

// GetFieldDBChatSession returns field of DBChatSession
//
// generated from "// @db:hash|Pika|DBUser:%s,UID|DBChatSession:%s,SessionKey"
func (p *Pika) GetFieldDBChatSession(SessionKey string) string {
	return fmt.Sprintf(fieldDBChatSession, SessionKey)
}

// GetDBChatSession loads DBChatSession from `Pika`
//
//	data *pb.DBChatSession if every thing goes well.
//	ok   bool is false if there is no data.
//	err  error is not nil if there is something wrong except no data.
//
// prometheus metric: QPS, KeySize and OperationProcessTime
//
// generated from "// @db:hash|Pika|DBUser:%s,UID|DBChatSession:%s,SessionKey"
func (p *Pika) GetDBChatSession(ctx context.Context, UID string, SessionKey string, opts ...*basedb.Options[*pb.DBChatSession]) (data *pb.DBChatSession, ok bool, err error) {
	key := p.GetKeyDBChatSession(UID)
	field := p.GetFieldDBChatSession(SessionKey)
	data = &pb.DBChatSession{}
	db := p.getDBChatSessionDatabase()
	ok, err = db.Get(ctx, key, field, &data, opts...)
	if !ok || err != nil {
		data.UID = UID
		data.SessionKey = SessionKey
	}
	return
}

func (p *Pika) GetDBChatSessionWithSession(ctx context.Context, UID string, SessionKey string, opts ...*basedb.Options[*pb.DBChatSession]) (data *pb.DBChatSession, ok bool, err error) {
	key := p.GetKeyDBChatSession(UID)
	field := p.GetFieldDBChatSession(SessionKey)
	data = &pb.DBChatSession{}
	db := p.getDBChatSessionDatabase()
	ok, err = db.GetFromSession(ctx, key, field, &data, opts...)
	if !ok || err != nil {
		data.UID = UID
		data.SessionKey = SessionKey
	}
	return
}

// SetDBChatSession saves DBChatSession to `Pika`
//
//	err error any error when put data to database
//
// prometheus metric: QPS, KeySize and OperationProcessTime
//
// generated from "// @db:hash|Pika|DBUser:%s,UID|DBChatSession:%s,SessionKey"
func (p *Pika) SetDBChatSession(ctx context.Context, data *pb.DBChatSession) (err error) {
	key := p.GetKeyDBChatSession(data.UID)
	field := p.GetFieldDBChatSession(data.SessionKey)
	db := p.getDBChatSessionDatabase()
	return db.Set(ctx, key, field, data)
}

func (p *Pika) SetDBChatSessionWithSess(ctx context.Context, data *pb.DBChatSession) (err error) {
	key := p.GetKeyDBChatSession(data.UID)
	field := p.GetFieldDBChatSession(data.SessionKey)
	db := p.getDBChatSessionDatabase()
	return db.SetWithSess(ctx, key, field, data)
}

// DeleteDBChatSession is generated from "// @db:hash|Pika|DBUser:%s,UID|DBChatSession:%s,SessionKey"
//
//	err  error any error when put data to database
//
// if monitor is enabled on init this operation records prometheus
// metric: QPS and OperationProcessTime
func (p *Pika) DeleteDBChatSession(ctx context.Context, UID string, SessionKey string) (ok bool, err error) {
	key := p.GetKeyDBChatSession(UID)
	field := p.GetFieldDBChatSession(SessionKey)
	db := p.getDBChatSessionDatabase()
	return db.Delete(ctx, key, field)
}
